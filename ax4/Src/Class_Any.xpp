//
// mazzy, https://github.com/mazzy-ax/SysAny
//
// класс содержит неизменяемое значение любого типа
// чтобы переприсвоить значение создайте новый объект этого типа
//
// Чем отличается этот класс от Anytype и от SysAnyType?
// 1.
// Аксапта позволяет установить произвольное значение в переменную типа anytype только один раз.
// Во время первой инициализации тип переменной фиксируется, в дальнейшем тип изменить нельзя.
//
// Anytype var = 1;
// var = 2;         // ok
// var = '';        // результат не определен. В большинстве версий аксапты будет 0;
//
// 2.
// Чтобы обойти эту проблему в Аксапту ввели тип SysAnyType
// SysAnyType позволяет в любой момент установить действительно любое значение.
// Но ради этого тип сделали очень тяжелым - в куче хранится map, key и сам объект в качестве value
// кроме того, каждое обращение к value - это lookup внутри map
//
// SysAnyType var = new SysAnyType(1);
// var.value('');   // будет хранить пустую строку
//
// 3.
// Данный класс Any не позволяет изменять значение хранимого объекта.
// Поэтому данный класс может просто хранить ref на объект произвольного типа
// Но! переприсвоить значение можно просто пересоздав объект Any
//
// Any var = new Any(1);        // ok
// var = new Any('');           // ok
//
// у Any есть несколько специализированных конструкторов и обычный construct
//
// Any var = Any::constuct(1);  // ok
// var = Any::constuct('');     // ok
//
// Класс проявляется в цикле (обратите внимание на специализированный конструктор conpeek)
//
// container con = [1, '', 31\01\2019];
// Any var;
// for(i=1; i<=conlen(con); ++i)
// {
//     var = Any::conpeek(con, i);
// }
class Any
{
    Anytype value;

    // рекурсивно заполняет textBuffer
    protected textBuffer addToTextBuffer(  str          _sep            = ',',
                                           boolean      _queryValue     = false,
                                           TextBuffer   _textBuffer     = null)
    {
        Types   type    = typeof(value);
        int     i;
        int     len;
        str     s;
    ;

        if (_textBuffer == null)
        {
            _textBuffer = new TextBuffer();
        }

        switch(type)
        {
            case Types::Container:
                if (!_queryValue)
                {
                    _textBuffer.appendText('[');
                }

                len = conlen(value);
                for(i=1; i<=len; ++i)
                {
                    if(i>1)
                    {
                        _textBuffer.appendText(_sep);
                    }
                    _textBuffer = Any::conpeek(value, i).addToTextBuffer(_sep, _queryValue, _textBuffer);
                }

                if (!_queryValue)
                {
                    _textBuffer.appendText(']');
                }
                break;

            case Types::Class:
            case Types::Record:
            case Types::AnyType:
            case Types::BLOB:
            case Types::void:
                throw error(Error::wrongUseOfFunction(funcname()));

            default:
                s = _queryValue ? SysQuery::value(value) : strfmt('%1', value);
                _textBuffer.appendText(s);
                break;
        }

        return _textBuffer;
    }

    public Object asClass()
    {
        return this.ensureType(Types::Class).value();
    }

    public container asContainer()
    {
        return this.ensureType(Types::Container).value();
    }

    public Date asDate()
    {
        return this.ensureType(Types::Date).value();
    }

    public anytype asEnum()
    {
        return this.ensureType(Types::Enum).value();
    }

    public GUID asGUID()
    {
        return this.ensureType(Types::Guid).value();
    }

    public int asInt()
    {
        return this.ensureTypes([Types::Integer, Types::Enum, Types::DateTime]).value();
    }

    public int64 asInt64()
    {
        return this.ensureTypes([Types::Int64, Types::Integer, Types::Enum, Types::DateTime]).value();
    }

    public Object asObject()
    {
        return this.ensureType(Types::Class).value();
    }

    public Real asReal()
    {
        return this.ensureType(Types::Real).value();
    }

    public Common asRecord()
    {
        return this.ensureType(Types::Record).value();
    }

    public str asString()
    {
        return this.ensureTypes([Types::String, Types::RString, Types::VarString]).value();
    }

    public timeOfDay asTime()
    {
        return this.ensureType(Types::DateTime).value();
    }

    // если значение пустое, то выводит ошибку и возвращает false
    // если значение непустое, то возвращает true
    //
    // нормально работает с контейнерами, классами, CLR и прочими сложными объектами. В отличие от global::checkFilling()
    public boolean checkNotEmpty(str _valueLabel, str _txt = 'Значение не должно быть пустым. Укажите значение для %1.')
    {
        boolean ret = true;
    ;
        if (!value)
        {
            ret = CheckFailed(strfmt(_txt, _valueLabel));
        }

        return ret;
    }

    public boolean checkType(Types _type)
    {
        boolean ret = (this.type() == _type);

        return ret;
    }

    public boolean checkTypeId(ExtendedTypeId  _typeId)
    {
        Types       type    = extendedTypeId2Type(_typeId);
        boolean     ret     = this.checkType(type);

        return ret;
    }

    public boolean checkTypes(container _typeCon)
    {
        boolean ret = (confind(_typeCon, this.type()) != 0);

        return ret;
    }

    public Any ensureType(Types _type)
    {
        if( this.checkType(_type) )
            return this;

        throw error(Error::wrongUseOfFunction(funcname()));
    }

    public Any ensureTypeId(ExtendedTypeId  _typeId)
    {
        if( this.checkTypeId(_typeID) )
            return this;

        throw error(Error::wrongUseOfFunction(funcname()));
    }

    public Any ensureTypes(container _typeCon)
    {
        if( this.checkTypes(_typeCon) )
            return this;

        throw error(Error::wrongUseOfFunction(funcname()));
    }

    // за основу взят SysAnyType::isEqual()
    public boolean equalsTo(Any _type2)
    {
        //Is one of them null ?
        if (!_type2)
        {
            return false;
        }

        //Are their types different ?
        if (this.type() != _type2.type())
        {
            return false;
        }

        //They are the same type. Is this type void ?
        if (this.type() == Types::void)
        {
            return true;
        }

        //Are their values different ?
        if (this.value() != _type2.value())
        {
            return false;
        }

        return true;
    }

    void new(Anytype _value = null)
    {
        value = _value;
    }

    public str queryValue()
    {
        Types       type    = typeof(value);
        str         ret;

        switch (type)
        {
            case Types::Container:
                ret = this.addToTextBuffer(',', true).getText();
                break;

            case Types::Class:
            case Types::Record:
            case Types::AnyType:
            case Types::BLOB:
            case Types::void:
                throw error(Error::wrongUseOfFunction(funcname()));

            default:
                ret = SysQuery::value(value);
                break;
        }

        return ret;
    }

    public str toString(str _sep = ',')
    {
        // поскольку этот метод может вызваться в отладчике еще до инициализации,
        // то в этом методе нельзя использовать методы класса и нельзя бросать исключение
        // и ни в коем случае не бросаем исключение на неинициализированные значения
        Types       type    = typeof(value);
        str         ret;
    ;

        switch (type)
        {
            case Types::String:
            case Types::RString:
                ret = value;
                break;

            case Types::Container:
                ret = this.addToTextBuffer(_sep).getText();
                break;

            case Types::AnyType:
                ret = '';
                break;

            case Types::Record:
            case Types::Class:
            case Types::BLOB:
            case Types::void:
                ret = strfmt('%1', type); // не бросаем исключение! throw error(Error::unsupportedEnum(funcname(), type));
                break;

            default:
                ret = strfmt('%1', value);
                break;
        }

        return ret;
    }

    public Types type()
    {
        Types type = typeof(value);

        return type;
    }

    // только чтение! см. комментарий к classDeclaration
    public AnyType value()
    {
        return value;
    }

    // принимает данные в контейнере, который состоит из контейнеров - значение и метка
    // выдает ошибки для всех пустых значений
    // если хотя бы одно значение пустое, то возвращает false
    // если все значения не пустые, то возвращает true
    //
    // пример использования:
    //     Any::checkAllNotEmpty([[purchId, 'Закупка'], [emplId, 'Ответственный']]);
    //
    public static boolean checkAllNotEmpty(container _pairs, str _txt = 'Значение не должно быть пустым. Укажите значение для %1.')
    {
        boolean     ret = true;

        container   pair;
        str         label;

        int         i;
        int         len = conlen(_pairs);
        ;

        for (i=1; i<=len; ++i)
        {
            // следующие две строки кода могут выбросить исключение,
            // если программист положил в контейнер данные неправильного формата
            // не делаем дополнительных проверок, а просто даем Аксапте выругаться
            pair  = Any::conpeek(_pairs, i).asContainer();
            label = conpeek(pair, 2);

            // здесь возможно появление ошибок, если значение пусто
            ret   = Any::conpeek(pair, 1).checkNotEmpty(label, _txt) && ret;
        }

        return ret;
    }

    public static Any conpeek(container _con, int _idx)
    {
        anytype value   = conpeek(_con, _idx);  // не делаем дополнительных проверок: к случае чего, аксапта выбросит исключение про контейнеры
        Any     ret     = Any::constuct(value);
    ;

        return ret;
    }

    public static Any constuct(Anytype _value)
    {
        Any any = new Any(_value);

        return any;
    }

    public static Any field(Common _record, fieldId _fieldid)
    {
        anytype value   = _record.(_fieldid);  // не делаем дополнительных проверок: к случае чего, аксапта выбросит исключение про поля в записи
        Any     ret     = Any::constuct(value);

        return ret;
    }

    // за основу взят SysAnyType::isEqual()
    static public boolean isEqual(Any _type1, Any _type2)
    {
        //Are both null ?
        if (!_type1 && !_type2)
        {
            return true;
        }

        //Is one of them null ?
        if (!_type1 || !_type2)
        {
            return false;
        }

        //Are their types different ?
        if (_type1.type() != _type2.type())
        {
            return false;
        }

        //They are the same type. Is this type void ?
        if (_type1.type() == Types::void)
        {
            return true;
        }

        //Are their values different ?
        if (_type1.value() != _type2.value())
        {
            return false;
        }

        return true;
    }
}